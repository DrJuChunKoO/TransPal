---
import ErrorDisplay from './ErrorDisplay.astro';

export interface Props {
  fallbackTitle?: string;
  fallbackMessage?: string;
  showRetry?: boolean;
  showHome?: boolean;
  showBack?: boolean;
  context?: string;
}

const {
  fallbackTitle = '載入失敗',
  fallbackMessage = '內容載入時發生錯誤，請重試或返回首頁。',
  showRetry = true,
  showHome = true,
  showBack = true,
  context
} = Astro.props;

// This component wraps content and provides error boundaries
// It's designed to catch and display errors gracefully
---

<div class="error-wrapper">
  <slot />
  
  <!-- Fallback error display (hidden by default, shown via JavaScript when needed) -->
  <div id="error-fallback" class="hidden">
    <ErrorDisplay 
      title={fallbackTitle}
      message={fallbackMessage}
      type="error"
      showRetry={showRetry}
      showHome={showHome}
      showBack={showBack}
      context={context}
    />
  </div>
</div>

<script>
  // Client-side error handling for dynamic content
  function handleError(error: Error, context?: string) {
    console.error('Error in ErrorWrapper:', error);
    
    // Hide main content and show error fallback
    const wrapper = document.querySelector('.error-wrapper');
    const fallback = document.getElementById('error-fallback');
    
    if (wrapper && fallback) {
      // Hide all children except the error fallback
      Array.from(wrapper.children).forEach(child => {
        if (child.id !== 'error-fallback') {
          (child as HTMLElement).style.display = 'none';
        }
      });
      
      // Show error fallback
      fallback.classList.remove('hidden');
      
      // Update context if provided
      if (context) {
        const contextElement = fallback.querySelector('[data-context]');
        if (contextElement) {
          contextElement.textContent = context;
        }
      }
    }
  }

  // Global error handler for unhandled promise rejections
  window.addEventListener('unhandledrejection', (event) => {
    handleError(new Error(event.reason), 'Unhandled Promise Rejection');
  });

  // Global error handler for JavaScript errors
  window.addEventListener('error', (event) => {
    handleError(new Error(event.message), `${event.filename}:${event.lineno}`);
  });

  // Export for use by other components
  (window as any).handleError = handleError;
</script>

<style>
  .error-wrapper {
    min-height: inherit;
  }
</style>