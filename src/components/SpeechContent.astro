---
import type { SpeechDetail } from '../types/speech';
import Avatar from './Avatar.astro';
import MessageText from './MessageText.astro';
import MarkdownContent from './MarkdownContent.astro';

export interface Props {
  speech: SpeechDetail;
  filename?: string; // Add filename prop for correct URL generation
}

const { speech } = Astro.props;

// Ensure speech content is an array before filtering
const speechContent = Array.isArray(speech?.content) ? speech.content : [];

// Filter out non-speech content for the timeline
const speechItems = speechContent.filter(item => item && item.type === 'speech');
---

<div>
  {speechContent.map((item) => {
    if (item.type === 'divider') {
      return (
        <div class="flex items-center my-8">
          <div class="flex-1 border-t border-gray-300 dark:border-gray-600"></div>
          <div class="px-4 text-sm text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-900">
            {item.text || '---'}
          </div>
          <div class="flex-1 border-t border-gray-300 dark:border-gray-600"></div>
        </div>
      );
    }

    if (item.type === 'markdown') {
      return (
        <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
          <div class="text-blue-800 dark:text-blue-200">
            <MarkdownContent content={item.text} size="base" className="prose-blue" />
          </div>
        </div>
      );
    }

    if (item.type === 'speech') {
      return (
        <div
          id={item.id}
          class="flex gap-4 p-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors group"
        >
          <!-- Avatar -->
          <div class="flex-shrink-0">
            <Avatar speakerName={item.speaker} />
          </div>

          <!-- Content -->
          <div class="flex-1 min-w-0">
            <!-- Speaker and time -->
            <div class="flex items-center justify-between mb-2">
              <div class="flex items-center gap-2">
                <h3 class="font-semibold text-gray-900 dark:text-gray-100">
                  {item.speaker}
                </h3>
              </div>
            </div>

            <!-- Message text -->
            <div class="text-gray-700 dark:text-gray-300">
              <MessageText content={item.text} type="auto" size="sm" />
            </div>
          </div>
        </div>
      );
    }

    return null;
  })}

  {speechItems.length === 0 && (
    <div class="text-center py-12">
      <div class="text-gray-500 dark:text-gray-400 text-lg">
        此對話暫無內容
      </div>
    </div>
  )}
</div>