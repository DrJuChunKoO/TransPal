import fs from "fs/promises";
import path from "path";

const speechesDir = path.join(process.cwd(), "public", "speeches");
const avatarsDir = path.join(process.cwd(), "public", "avatars");
const outputBaseDir = path.join(process.cwd(), "utils", "generated");
const outputSearchDataFile = path.join(
  process.cwd(),
  "public",
  "search-data.json",
);
const outputIndexFile = path.join(outputBaseDir, "index.js");
const outputSpeechesDir = path.join(outputBaseDir, "speeches");
const outputAvatarsFile = path.join(outputBaseDir, "avatars.js");

async function generateData() {
  console.log(
    "Generating search data JSON, speech index, individual speech files, and avatar list...",
  );
  try {
    await fs.mkdir(outputBaseDir, { recursive: true });
    await fs.mkdir(path.dirname(outputSearchDataFile), { recursive: true });
    await fs.mkdir(outputSpeechesDir, { recursive: true });

    const files = await fs.readdir(speechesDir);
    const jsonFiles = files.filter((file) => file.endsWith(".json"));

    const searchDataList = [];
    const indexMetadataList = [];

    for (const file of jsonFiles) {
      const filePath = path.join(speechesDir, file);
      const fileContent = await fs.readFile(filePath, "utf-8");
      const filenameKey = file.replace(/\.json$/, "");
      const outputSpeechFile = path.join(
        outputSpeechesDir,
        `${filenameKey}.js`,
      );

      try {
        const speechParsed = JSON.parse(fileContent);
        const originalContent = Array.isArray(speechParsed.content)
          ? speechParsed.content
          : [];

        const contentForGeneratedFiles = originalContent.map(
          ({ id, text, speaker, type }) => ({
            id,
            text,
            speaker,
            type,
          }),
        );

        const { info } = speechParsed;
        let { name, date } = info || {};

        if (!name) {
          name = filenameKey;
          console.warn(
            `Warning: Speech name missing in ${file}. Using filename.`,
          );
        }
        if (!date || isNaN(new Date(date).getTime())) {
          console.warn(
            `Warning: Invalid/missing date in ${file}. Using epoch.`,
          );
          date = new Date(0).toISOString();
        }

        searchDataList.push({
          name: name,
          date: date,
          filename: filenameKey,
          contentSummary: contentForGeneratedFiles.map(
            ({ id, text, speaker }) => ({
              id,
              text,
              speaker,
            }),
          ),
        });

        indexMetadataList.push({
          name: name,
          date: date,
          filename: filenameKey,
        });

        const speechForJsFile = {
          version: speechParsed.version || "1.0",
          info: info || { name, date },
          content: contentForGeneratedFiles,
        };

        const speechFileContentJS = `
// Generated from ${file}
export default ${JSON.stringify(speechForJsFile)};
`;
        await fs.writeFile(outputSpeechFile, speechFileContentJS);
      } catch (parseError) {
        console.error(`Error processing ${file}:`, parseError);
      }
    }

    const sortByDateDesc = (a, b) =>
      new Date(b.date).getTime() - new Date(a.date).getTime();
    searchDataList.sort(sortByDateDesc);
    indexMetadataList.sort(sortByDateDesc);

    await fs.writeFile(outputSearchDataFile, JSON.stringify(searchDataList));
    console.log(`Generated search data at ${outputSearchDataFile}`);

    const indexFileContentJS = `
// This file is generated by scripts/generate-data.mjs during build time.
// Do not edit manually.

// Contains MINIMAL metadata for all speeches, used by getSpeeches.
export const speeches = ${JSON.stringify(indexMetadataList)};
`;
    await fs.writeFile(outputIndexFile, indexFileContentJS);
    console.log(`Generated speech index at ${outputIndexFile}`);
    console.log(`Generated individual speech files in ${outputSpeechesDir}`);

    try {
      const avatarFiles = await fs.readdir(avatarsDir);
      const avatarMap = avatarFiles
        .filter((file) => file.endsWith(".jpg") && !file.startsWith("."))
        .reduce((acc, file) => {
          const name = file.replace(/\.jpg$/, "");
          acc[name] = true;
          return acc;
        }, {});

      const avatarsFileContentJS = `
// This file is generated by scripts/generate-data.mjs during build time.
// Do not edit manually.

export const avatarMap = ${JSON.stringify(avatarMap)};
`;
      await fs.writeFile(outputAvatarsFile, avatarsFileContentJS);
      console.log(`Generated avatar list at ${outputAvatarsFile}`);
    } catch (avatarError) {
      console.error("Error generating avatar data:", avatarError);
    }
  } catch (error) {
    console.error("Error generating data:", error);
    process.exit(1);
  }
}

generateData();
